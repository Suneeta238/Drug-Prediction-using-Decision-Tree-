# -*- coding: utf-8 -*-
"""ML Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rxXk4UL-Eo2oT9IbtuC5AxQvLR41FATx
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report

df=pd.read_csv('drug200.csv')
df

df.shape

#preprocessing
#Remove the column containing the target name since it doesn't contain numeric values.
X = df[['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']].values
X[0:5]

from sklearn import preprocessing
le_sex = preprocessing.LabelEncoder()
le_sex.fit(['F','M'])
X[:,1] = le_sex.transform(X[:,1]) 


le_BP = preprocessing.LabelEncoder()
le_BP.fit([ 'LOW', 'NORMAL', 'HIGH'])
X[:,2] = le_BP.transform(X[:,2])


le_Chol = preprocessing.LabelEncoder()
le_Chol.fit([ 'NORMAL', 'HIGH'])
X[:,3] = le_Chol.transform(X[:,3]) 

X[0:5]

Y = df["Drug"]
Y[0:5]

#Setting up decision tree
from sklearn.model_selection import train_test_split

X_trainset, X_testset, Y_trainset, Y_testset = train_test_split(X, Y, test_size=0.3, random_state=3)

#practice
#training
print("X_trainsetX SHAPE:  " + str(X_trainset.shape))
print("Y_trainsetX SHAPE:  " + str(Y_trainset.shape))

#testing
print("X_testsetX SHAPE:  " + str(X_testset.shape))
print("Y_testsetY SHAPE:  " + str(Y_testset.shape))

clf_gini = DecisionTreeClassifier(criterion = "gini",
            random_state = 100,max_depth=4)

clf_gini=clf_gini.fit(X_trainset,Y_trainset)
clf_gini

#prediction
predTree = clf_gini.predict(X_testset)
predTree

print (predTree [0:5])
print (Y_testset [0:5])

df=confusion_matrix(Y_testset,predTree)
df

df=accuracy_score(Y_testset,predTree)*100
df

df=classification_report(Y_testset, predTree)
df

from sklearn import metrics
import matplotlib.pyplot as plt
print("Accuracy:",metrics.accuracy_score(Y_testset, predTree))

# Commented out IPython magic to ensure Python compatibility.
#visualization
from  io import StringIO
import pydotplus
import matplotlib.image as mpimg
from sklearn import tree
# %matplotlib inline

dot_data = StringIO()
filename = "drugtree.png"
#featureNames = df.columns[0:5]
out=tree.export_graphviz(clf_gini,out_file=dot_data, class_names= np.unique(Y_trainset), filled=True,  special_characters=True,rotate=False)  
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png(filename)
img = mpimg.imread(filename)
plt.figure(figsize=(100, 200))
plt.imshow(img,interpolation='nearest')

#modeling
clf_entropy = DecisionTreeClassifier(criterion="entropy", random_state=100,max_depth = 4)
clf_entropy

clf_entropy.fit(X_trainset, Y_trainset)
clf_entropy

predTree1 = clf_entropy.predict(X_testset)
predTree1

print (predTree1 [0:5])
print (Y_testset [0:5])

df1=confusion_matrix(Y_testset,predTree1)
df1

df1=accuracy_score(Y_testset,predTree1)*100
df1

df1=classification_report(Y_testset, predTree1)
df1

#Evaluation
from sklearn import metrics
import matplotlib.pyplot as plt
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(Y_testset, predTree1))

# Commented out IPython magic to ensure Python compatibility.
#visualization
from  io import StringIO
import pydotplus
import matplotlib.image as mpimg
from sklearn import tree
# %matplotlib inline

dot_data = StringIO()
filename = "drugtree.png"
#featureNames = df.columns[0:5]
out=tree.export_graphviz(clf_entropy,out_file=dot_data, class_names= np.unique(Y_trainset), filled=True,  special_characters=True,rotate=False)  
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png(filename)
img = mpimg.imread(filename)
plt.figure(figsize=(100, 200))
plt.imshow(img,interpolation='nearest')

from sklearn.model_selection import GridSearchCV
tuned_parameters = [{'criterion':['gini','entropy'],'max_depth':range(2,10)}]
clf_tree = DecisionTreeClassifier()
#scoring = ['precision_macro', 'balanced_accuracy']
clf = GridSearchCV(clf_tree,tuned_parameters,n_jobs=1)
clf.fit(X_trainset, Y_trainset)

clf.best_score_

clf.best_params_